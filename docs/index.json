{"repository_name":"github.com/Marzipanzerfaust/crystal-i8080","body":"# crystal-i8080\n\n**WIP: partly functional**\n\nThis is a simple intrepretive emulator for the [Intel 8080](https://en.wikipedia.org/wiki/Intel_8080) written in [Crystal](https://crystal-lang.org/). It is intended to be used as a core for projects that require an embedded i8080 CPU. I wrote it because 1) I wanted to learn more about Crystal and 2) I wanted to learn about writing emulators.\n\nIn addition to the CPU itself, there is a very simple CP/M machine (`I8080::CPMMachine`) that emulates simple CP/M I/O calls. It isn't a fully functional emulator, but it should be enough to test simple CP/M programs, such as diagnostic tests.\n\nI have tested this using my own spec derived from examples in the 8080 Programmer's Manual; this is located at `spec/cpu_spec.cr`. I have also used Ian Bartholomew's 8080/8085 Exerciser, the files of which are courtesy of [begoon/8080ex1](https://github.com/begoon/8080ex1); these are located in `vendor/cpu_diagnostics`.\n\nIf you have Crystal installed, you can check the test results yourself by running `crystal spec` from the root directory; just be warned that the 8080/8085 Exerciser spec can take several minutes to complete.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```\ndependencies:\n  i8080:\n    github: Marzipanzerfaust/crystal-i8080\n```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"i8080\"\n```\n\nLoad a ROM and execute it:\n\n```crystal\ncpu = I8080::CPU.new\ncpu.load_file(\"path/to/rom\")\ncpu.run\n```\n\nDisassemble a ROM, printing the instructions to STDOUT:\n\n```crystal\ndasm = I8080::Disassembler.new\ndasm.load_file(\"path/to/rom\")\ndasm.run\n# Output:\n# 0000: 3E 56       MVI    A,$56\n# 0002: CE BE       ACI    $BE\n# 0004: CE 42       ACI    $42\n# ...\n```\n\nAlternatively, you can create a CPU in debug mode, which will use an embedded disassembler to print instructions to STDOUT as they're executed:\n\n```crystal\ncpu = I8080::CPU.new(debug: true)\ncpu.load_file(\"path/to/rom\")\ncpu.step     # => 0000: 31 5C 02    LXI     SP,$025C\ncpu.step     # => 0003: 01 FF 03    LXI     B,$03FF\ncpu.step(2)  # => 0006: C5          PUSH    B\n             # => 0007: 2A 5A 02    LHLD    ($025A)\n```\n\nThere is also a very barebones CP/M implementation:\n\n```crystal\ncpm_machine = I8080::CPMMachine.new\ncpm_machine.load_file(\"path/to/cpm/program\")\n```\n\nFor more details, check the [documentation](https://marzipanzerfaust.github.io/crystal-i8080).\n","program":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/Marzipanzerfaust/crystal-i8080","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080","path":"I8080.html","kind":"module","full_name":"I8080","name":"I8080","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"i8080/cpu.cr","line_number":22,"url":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr"},{"filename":"i8080.cr","line_number":3,"url":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080.cr"}],"repository_name":"github.com/Marzipanzerfaust/crystal-i8080","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"AF","name":"AF","value":"1_u8 << 4","doc":"Auxiliary Carry Flag","summary":"<p>Auxiliary Carry Flag</p>"},{"id":"CF","name":"CF","value":"1_u8 << 0","doc":"Carry Flag","summary":"<p>Carry Flag</p>"},{"id":"OP_CYCLES","name":"OP_CYCLES","value":"[4, 10, 7, 5, 5, 5, 7, 7, 4, 4, 10, 7, 5, 5, 7, 4, 4, 10, 7, 5, 5, 5, 7, 7, 4, 4, 10, 7, 5, 5, 7, 4, 4, 10, 16, 5, 5, 5, 7, 4, 4, 10, 16, 5, 5, 5, 7, 4, 4, 10, 13, 5, 5, 5, 7, 4, 4, 10, 13, 5, 5, 5, 10, 4, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 7, 5, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 5, 10, 10, 10, 11, 11, 7, 11, 5, 10, 10, 10, 11, 17, 7, 11, 5, 10, 10, 10, 11, 11, 7, 11, 5, 10, 10, 10, 11, 17, 7, 11, 5, 10, 10, 18, 11, 11, 7, 11, 5, 5, 10, 5, 11, 17, 7, 11, 5, 10, 10, 4, 11, 11, 7, 11, 5, 5, 10, 4, 11, 17, 7, 11]","doc":"Instruction cycle counts\n\nNOTE: Some instructions add additional cycles under certain\nconditions.","summary":"<p>Instruction cycle counts</p>"},{"id":"PF","name":"PF","value":"1_u8 << 2","doc":"Parity Flag","summary":"<p>Parity Flag</p>"},{"id":"SF","name":"SF","value":"1_u8 << 7","doc":"Sign Flag","summary":"<p>Sign Flag</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.1.11\"","doc":null,"summary":null},{"id":"ZF","name":"ZF","value":"1_u8 << 6","doc":"Zero Flag","summary":"<p>Zero Flag</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"bytes_to_word(a:Byte,b:Byte):Word-class-method","html_id":"bytes_to_word(a:Byte,b:Byte):Word-class-method","name":"bytes_to_word","doc":"Returns a word formed out of two given bytes. *a* is the low byte\nand *b* is the high byte of the resulting word.","summary":"<p>Returns a word formed out of two given bytes.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Byte"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Byte"}],"args_string":"(a : Byte, b : Byte) : Word","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080.cr#L60","def":{"name":"bytes_to_word","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Byte"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Word","visibility":"Public","body":"word = uninitialized Word\nlo = (pointerof(word)).as(::Pointer(Byte))\nhi = lo + 1\nif BIG_ENDIAN\n  lo, hi = hi, lo\nend\nlo.value = a\nhi.value = b\nreturn word\n"}},{"id":"word_to_bytes(word:Word):Tuple(Byte,Byte)-class-method","html_id":"word_to_bytes(word:Word):Tuple(Byte,Byte)-class-method","name":"word_to_bytes","doc":"Returns the two bytes that form a given word. The low byte will come\nfirst, followed by the high byte.","summary":"<p>Returns the two bytes that form a given word.</p>","abstract":false,"args":[{"name":"word","doc":null,"default_value":"","external_name":"word","restriction":"Word"}],"args_string":"(word : Word) : Tuple(Byte, Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080.cr#L75","def":{"name":"word_to_bytes","args":[{"name":"word","doc":null,"default_value":"","external_name":"word","restriction":"Word"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(Byte, Byte)","visibility":"Public","body":"lo = (pointerof(word)).as(::Pointer(Byte))\nhi = lo + 1\nif BIG_ENDIAN\n  lo, hi = hi, lo\nend\nreturn {lo.value, hi.value}\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080/Byte","path":"I8080/Byte.html","kind":"alias","full_name":"I8080::Byte","name":"Byte","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"i8080.cr","line_number":7,"url":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080.cr"}],"repository_name":"github.com/Marzipanzerfaust/crystal-i8080","program":false,"enum":false,"alias":true,"aliased":"UInt8","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080","kind":"module","full_name":"I8080","name":"I8080"},"doc":"For the Intel 8080, bytes are unsigned 8-bit integers.","summary":"<p>For the Intel 8080, bytes are unsigned 8-bit integers.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080/CPMMachine","path":"I8080/CPMMachine.html","kind":"class","full_name":"I8080::CPMMachine","name":"CPMMachine","abstract":false,"superclass":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080/CPU","kind":"class","full_name":"I8080::CPU","name":"CPU"},"ancestors":[{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080/CPU","kind":"class","full_name":"I8080::CPU","name":"CPU"},{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"i8080/cpm_machine.cr","line_number":31,"url":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpm_machine.cr"}],"repository_name":"github.com/Marzipanzerfaust/crystal-i8080","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080","kind":"module","full_name":"I8080","name":"I8080"},"doc":"A modified `CPU` that provides limited support for 8-bit CP/M system\ncalls. This is not a proper CP/M emulator, obviously, but it should\nallow for testing simple CP/M programs, such as Intel 8080 diagnostics.\n\nThe supported BDOS calls are:\n* 0x00 - P_TERMCPM\n* 0x01 - C_READ\n* 0x02 - C_WRITE\n* 0x03 - A_READ (aliased to C_READ)\n* 0x04 - A_WRITE (aliased to C_WRITE)\n* 0x05 - L_WRITE (aliased to C_WRITE)\n* 0x09 - C_WRITESTR\n* 0x0A - C_READSTR\n* 0x0C - [lift head]\n* 0x6E - C_DELIMIT\n* 0x6F - C_WRITEBLK\n* 0x70 - L_WRITEBLK\n* 0x8F - P_TERM\n* 0xD3 - [print decimal number]\n\nAny calls not listed above will raise an exception.\n\nSince this is designed to run CP/M programs, its origin address\ndefaults to 0x0100 instead of 0x0000.\n\nThanks to John Elliott at [seasip.info](http://seasip.info/index.html)\nfor providing a [very helpful page](http://seasip.info/Cpm/bdos.html)\nthat describes all of the BDOS calls in CP/M.","summary":"<p>A modified <code><a href=\"../I8080/CPU.html\">CPU</a></code> that provides limited support for 8-bit CP/M system calls.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080/CPU","path":"I8080/CPU.html","kind":"class","full_name":"I8080::CPU","name":"CPU","abstract":false,"superclass":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"i8080/cpu.cr","line_number":22,"url":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr"}],"repository_name":"github.com/Marzipanzerfaust/crystal-i8080","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"CLOCK_RATE","name":"CLOCK_RATE","value":"2000000","doc":"The i8080's clock rate is 2MHz: this is internally for determining\nthe interrupt period","summary":"<p>The i8080's clock rate is 2MHz: this is internally for determining the interrupt period</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080/CPMMachine","kind":"class","full_name":"I8080::CPMMachine","name":"CPMMachine"}],"including_types":[],"namespace":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080","kind":"module","full_name":"I8080","name":"I8080"},"doc":"Emulator for the Intel 8080 CPU.\n\nLoad a ROM and execute it:\n```\ncpu = I8080::CPU.new\ncpu.load_file(\"path/to/rom\")\ncpu.run\n```\n\nAlternatively, you can create a CPU in debug mode which has an\nembedded `Disassembler` that will print instructions as they are\nexecuted:\n```\ncpu = I8080::CPU.new(debug: true)\ncpu.load_file(\"path/to/rom\")\ncpu.step  # => 0000: 31 34 12    LXI    SP,$1234\ncpu.step  # => 0003: 3E 56       MVI    A,$56\n```\n\nThis is intended to be used in applications that require an embedded\nIntel 8080 core.","summary":"<p>Emulator for the Intel 8080 CPU.</p>","class_methods":[],"constructors":[{"id":"new(debug=false)-class-method","html_id":"new(debug=false)-class-method","name":"new","doc":"If *debug* is given, the CPU will be created in debug mode.","summary":"<p>If <em>debug</em> is given, the CPU will be created in debug mode.</p>","abstract":false,"args":[{"name":"debug","doc":null,"default_value":"false","external_name":"debug","restriction":""}],"args_string":"(debug = <span class=\"n\">false</span>)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L106","def":{"name":"new","args":[{"name":"debug","doc":null,"default_value":"false","external_name":"debug","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(debug)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"a:::Pointer(Byte)-instance-method","html_id":"a:::Pointer(Byte)-instance-method","name":"a","doc":"High byte pointer for AF; represents the A register; also known as\nthe *accumulator*.","summary":"<p>High byte pointer for AF; represents the A register; also known as the <em>accumulator</em>.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L44","def":{"name":"a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Byte)","visibility":"Public","body":"@a"}},{"id":"af:I8080::Pair-instance-method","html_id":"af:I8080::Pair-instance-method","name":"af","doc":"The AF register pair; also known as the *PSW* (Program Status Word).","summary":"<p>The AF register pair; also known as the <em>PSW</em> (Program Status Word).</p>","abstract":false,"args":[],"args_string":" : I8080::Pair","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L28","def":{"name":"af","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@af"}},{"id":"b:::Pointer(Byte)-instance-method","html_id":"b:::Pointer(Byte)-instance-method","name":"b","doc":"High byte pointer for BC; represents the B register.","summary":"<p>High byte pointer for BC; represents the B register.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L49","def":{"name":"b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Byte)","visibility":"Public","body":"@b"}},{"id":"bc:I8080::Pair-instance-method","html_id":"bc:I8080::Pair-instance-method","name":"bc","doc":"The BC register pair.","summary":"<p>The BC register pair.</p>","abstract":false,"args":[],"args_string":" : I8080::Pair","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L30","def":{"name":"bc","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bc"}},{"id":"c:::Pointer(Byte)-instance-method","html_id":"c:::Pointer(Byte)-instance-method","name":"c","doc":"Low byte pointer for BC; represents the C register.","summary":"<p>Low byte pointer for BC; represents the C register.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L51","def":{"name":"c","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Byte)","visibility":"Public","body":"@c"}},{"id":"cycles:Float64-instance-method","html_id":"cycles:Float64-instance-method","name":"cycles","doc":"Number of CPU cycles left before interrupt occurs.","summary":"<p>Number of CPU cycles left before interrupt occurs.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L75","def":{"name":"cycles","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cycles"}},{"id":"d:::Pointer(Byte)-instance-method","html_id":"d:::Pointer(Byte)-instance-method","name":"d","doc":"High byte pointer for DE; represents the D register.","summary":"<p>High byte pointer for DE; represents the D register.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L53","def":{"name":"d","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Byte)","visibility":"Public","body":"@d"}},{"id":"dasm:Disassembler?-instance-method","html_id":"dasm:Disassembler?-instance-method","name":"dasm","doc":"An embedded `Disassembler` that is created if the CPU is initialized\nin debug mode.","summary":"<p>An embedded <code><a href=\"../I8080/Disassembler.html\">Disassembler</a></code> that is created if the CPU is initialized in debug mode.</p>","abstract":false,"args":[],"args_string":" : Disassembler?","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L103","def":{"name":"dasm","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Disassembler | ::Nil","visibility":"Public","body":"@dasm"}},{"id":"de:I8080::Pair-instance-method","html_id":"de:I8080::Pair-instance-method","name":"de","doc":"The DE register pair.","summary":"<p>The DE register pair.</p>","abstract":false,"args":[],"args_string":" : I8080::Pair","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L32","def":{"name":"de","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@de"}},{"id":"debug:Bool-instance-method","html_id":"debug:Bool-instance-method","name":"debug","doc":"Tells whether or not the CPU is in debug mode.","summary":"<p>Tells whether or not the CPU is in debug mode.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L99","def":{"name":"debug","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@debug"}},{"id":"e:::Pointer(Byte)-instance-method","html_id":"e:::Pointer(Byte)-instance-method","name":"e","doc":"Low byte pointer for DE; represents the E register.","summary":"<p>Low byte pointer for DE; represents the E register.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L55","def":{"name":"e","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Byte)","visibility":"Public","body":"@e"}},{"id":"exec:Nil-instance-method","html_id":"exec:Nil-instance-method","name":"exec","doc":"Executes instructions until a HLT is encountered or until the\ninterrupt period expires. Once the interrupt period expires, it will\nexecute `int_callback` before exiting.","summary":"<p>Executes instructions until a HLT is encountered or until the interrupt period expires.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L273","def":{"name":"exec","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@stopped = false\nwhile !@stopped\n  step\n  if @cycles <= 0\n    int_callback\n    if @int_enabled\n      @int_enabled = false\n      op(@int_request)\n      @jumped = false\n    end\n    @cycles = @cycles + @int_period\n    break\n  end\nend\n"}},{"id":"f:::Pointer(Byte)-instance-method","html_id":"f:::Pointer(Byte)-instance-method","name":"f","doc":"Low byte pointer for AF; represents the F register; also known as\nthe *flag register*.","summary":"<p>Low byte pointer for AF; represents the F register; also known as the <em>flag register</em>.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L47","def":{"name":"f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Byte)","visibility":"Public","body":"@f"}},{"id":"file_size:Int32-instance-method","html_id":"file_size:Int32-instance-method","name":"file_size","doc":"The size in bytes of the currently loaded file.","summary":"<p>The size in bytes of the currently loaded file.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L89","def":{"name":"file_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@file_size"}},{"id":"flag?(f:Byte):Bool-instance-method","html_id":"flag?(f:Byte):Bool-instance-method","name":"flag?","doc":"Is the flag *f* set?","summary":"<p>Is the flag <em>f</em> set?</p>","abstract":false,"args":[{"name":"f","doc":null,"default_value":"","external_name":"f","restriction":"Byte"}],"args_string":"(f : Byte) : Bool","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L338","def":{"name":"flag?","args":[{"name":"f","doc":null,"default_value":"","external_name":"f","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@f.value.bits_set?(f)"}},{"id":"h:::Pointer(Byte)-instance-method","html_id":"h:::Pointer(Byte)-instance-method","name":"h","doc":"High byte pointer for HL; represents the H register.","summary":"<p>High byte pointer for HL; represents the H register.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L57","def":{"name":"h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Byte)","visibility":"Public","body":"@h"}},{"id":"hl:I8080::Pair-instance-method","html_id":"hl:I8080::Pair-instance-method","name":"hl","doc":"The HL register pair; primarily used for storing addresses.","summary":"<p>The HL register pair; primarily used for storing addresses.</p>","abstract":false,"args":[],"args_string":" : I8080::Pair","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L34","def":{"name":"hl","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@hl"}},{"id":"int_callback:Nil-instance-method","html_id":"int_callback:Nil-instance-method","name":"int_callback","doc":"What the CPU should do after the interrupt period expires.\n\nNOTE: This is a no-op; it is implemented by user machines to handle\nperiodic tasks, such as refreshing the display. It can be left blank\nif you are handling I/O externally.","summary":"<p>What the CPU should do after the interrupt period expires.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L324","def":{"name":"int_callback","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}},{"id":"int_enabled:Bool-instance-method","html_id":"int_enabled:Bool-instance-method","name":"int_enabled","doc":"Tells whether or not the CPU is accepting interrupts; controlled by\nthe EI and DI instructions.","summary":"<p>Tells whether or not the CPU is accepting interrupts; controlled by the EI and DI instructions.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L63","def":{"name":"int_enabled","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@int_enabled"}},{"id":"int_period:Float64-instance-method","html_id":"int_period:Float64-instance-method","name":"int_period","doc":"Number of CPU cycles to occur before interrupts should be serviced\n\nNOTE: This is 0 by default, indicating that interrupts will not be\nserviced. Use `set_int_period` to adjust it.","summary":"<p>Number of CPU cycles to occur before interrupts should be serviced</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L72","def":{"name":"int_period","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@int_period"}},{"id":"int_request:UInt8-instance-method","html_id":"int_request:UInt8-instance-method","name":"int_request","doc":"Interrupt opcode to be set by peripheral devices.","summary":"<p>Interrupt opcode to be set by peripheral devices.</p>","abstract":false,"args":[],"args_string":" : UInt8","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L66","def":{"name":"int_request","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@int_request"}},{"id":"int_request=(int_request)-instance-method","html_id":"int_request=(int_request)-instance-method","name":"int_request=","doc":"Interrupt opcode to be set by peripheral devices.","summary":"<p>Interrupt opcode to be set by peripheral devices.</p>","abstract":false,"args":[{"name":"int_request","doc":null,"default_value":"","external_name":"int_request","restriction":""}],"args_string":"(int_request)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L66","def":{"name":"int_request=","args":[{"name":"int_request","doc":null,"default_value":"","external_name":"int_request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@int_request = int_request"}},{"id":"io:Slice(UInt8)-instance-method","html_id":"io:Slice(UInt8)-instance-method","name":"io","doc":"The I/O space for the CPU (size 0xFF).\n\nEach byte represents the state of an I/O port. To interact with I/O\nports, see the `read_io`, `write_io`, `set_io`, and `reset_io`\nmethods.","summary":"<p>The I/O space for the CPU (size 0xFF).</p>","abstract":false,"args":[],"args_string":" : Slice(UInt8)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L96","def":{"name":"io","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@io"}},{"id":"l:::Pointer(Byte)-instance-method","html_id":"l:::Pointer(Byte)-instance-method","name":"l","doc":"Low byte pointer for HL; represents the L register.","summary":"<p>Low byte pointer for HL; represents the L register.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L59","def":{"name":"l","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Byte)","visibility":"Public","body":"@l"}},{"id":"load_file(filename:String):Int32-instance-method","html_id":"load_file(filename:String):Int32-instance-method","name":"load_file","doc":"Loads the contents of *filename* into the CPU's memory, starting at\nthe origin, then returns the file's size in bytes.","summary":"<p>Loads the contents of <em>filename</em> into the CPU's memory, starting at the origin, then returns the file's size in bytes.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"}],"args_string":"(filename : String) : Int32","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L141","def":{"name":"load_file","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"data = (File.read(filename)).chomp.to_slice\n@file_size = data.size\n@memory.copy_from(data)\nreturn @file_size\n"}},{"id":"memory:Slice(UInt8)-instance-method","html_id":"memory:Slice(UInt8)-instance-method","name":"memory","doc":"The memory space for the CPU (size 0xFFFF).\n\nTo interact with memory, see the `read_byte`, `read_word`,\n`write_byte`, `write_word`, and `write_bytes` methods.","summary":"<p>The memory space for the CPU (size 0xFFFF).</p>","abstract":false,"args":[],"args_string":" : Slice(UInt8)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L86","def":{"name":"memory","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@memory"}},{"id":"pc:I8080::Pair-instance-method","html_id":"pc:I8080::Pair-instance-method","name":"pc","doc":"The *program counter*, which keeps track of which byte in the ROM is\nabout to be executed by the CPU.","summary":"<p>The <em>program counter</em>, which keeps track of which byte in the ROM is about to be executed by the CPU.</p>","abstract":false,"args":[],"args_string":" : I8080::Pair","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L40","def":{"name":"pc","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@pc"}},{"id":"pop_byte:Byte-instance-method","html_id":"pop_byte:Byte-instance-method","name":"pop_byte","doc":"Pops a byte off the stack, returning it and incrementing the stack pointer.","summary":"<p>Pops a byte off the stack, returning it and incrementing the stack pointer.</p>","abstract":false,"args":[],"args_string":" : Byte","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L196","def":{"name":"pop_byte","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Byte","visibility":"Public","body":"@sp.w = @sp.w &+ 1\nreturn @memory[@sp.w &- 1]\n"}},{"id":"pop_word:Word-instance-method","html_id":"pop_word:Word-instance-method","name":"pop_word","doc":"Pops a word off the stack, returning it and incrementing the stack\npointer by two.","summary":"<p>Pops a word off the stack, returning it and incrementing the stack pointer by two.</p>","abstract":false,"args":[],"args_string":" : Word","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L203","def":{"name":"pop_word","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Word","visibility":"Public","body":"I8080.bytes_to_word(pop_byte, pop_byte)"}},{"id":"push_byte(byte:Byte):Nil-instance-method","html_id":"push_byte(byte:Byte):Nil-instance-method","name":"push_byte","doc":"Pushes the given byte onto the stack, decrementing the stack\npointer.","summary":"<p>Pushes the given byte onto the stack, decrementing the stack pointer.</p>","abstract":false,"args":[{"name":"byte","doc":null,"default_value":"","external_name":"byte","restriction":"Byte"}],"args_string":"(byte : Byte) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L181","def":{"name":"push_byte","args":[{"name":"byte","doc":null,"default_value":"","external_name":"byte","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@sp.w = @sp.w &- 1\n@memory[@sp.w] = byte\n"}},{"id":"push_word(word:Word):Nil-instance-method","html_id":"push_word(word:Word):Nil-instance-method","name":"push_word","doc":"Pushes the given word onto the stack, decrementing the stack pointer\nby two.","summary":"<p>Pushes the given word onto the stack, decrementing the stack pointer by two.</p>","abstract":false,"args":[{"name":"word","doc":null,"default_value":"","external_name":"word","restriction":"Word"}],"args_string":"(word : Word) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L188","def":{"name":"push_word","args":[{"name":"word","doc":null,"default_value":"","external_name":"word","restriction":"Word"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"lo, hi = I8080.word_to_bytes(word)\npush_byte(hi)\npush_byte(lo)\n"}},{"id":"read_byte(addr:Word):Byte-instance-method","html_id":"read_byte(addr:Word):Byte-instance-method","name":"read_byte","doc":"Returns the byte at the given address.","summary":"<p>Returns the byte at the given address.</p>","abstract":false,"args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"}],"args_string":"(addr : Word) : Byte","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L151","def":{"name":"read_byte","args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Byte","visibility":"Public","body":"@memory[addr]"}},{"id":"read_io(port:Byte):Byte-instance-method","html_id":"read_io(port:Byte):Byte-instance-method","name":"read_io","doc":"Returns the byte in the I/O port given by *port*.\n\nNOTE: Port numbers start at 1.","summary":"<p>Returns the byte in the I/O port given by <em>port</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Byte"}],"args_string":"(port : Byte) : Byte","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L210","def":{"name":"read_io","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Byte","visibility":"Public","body":"@io[port - 1]"}},{"id":"read_word(addr:Word):Word-instance-method","html_id":"read_word(addr:Word):Word-instance-method","name":"read_word","doc":"Returns the word at the given address.","summary":"<p>Returns the word at the given address.</p>","abstract":false,"args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"}],"args_string":"(addr : Word) : Word","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L156","def":{"name":"read_word","args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Word","visibility":"Public","body":"I8080.bytes_to_word(read_byte(addr), read_byte(addr + 1))"}},{"id":"reset:Nil-instance-method","html_id":"reset:Nil-instance-method","name":"reset","doc":"Resets all registers and flags to their initial values, along with\nthe embedded disassembler if debug mode is active.","summary":"<p>Resets all registers and flags to their initial values, along with the embedded disassembler if debug mode is active.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L117","def":{"name":"reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@af.w = @bc.w = @de.w = @hl.w = 0\n@pc.w = 0\n@sp.w = 0\n@cycles = @int_period\n@int_enabled = false\n@stopped = true\n@jumped = false\n@dasm.try(&.reset)\n"}},{"id":"reset_flag(f:Byte):Nil-instance-method","html_id":"reset_flag(f:Byte):Nil-instance-method","name":"reset_flag","doc":"Resets the the flag represented by *f*.","summary":"<p>Resets the the flag represented by <em>f</em>.</p>","abstract":false,"args":[{"name":"f","doc":null,"default_value":"","external_name":"f","restriction":"Byte"}],"args_string":"(f : Byte) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L333","def":{"name":"reset_flag","args":[{"name":"f","doc":null,"default_value":"","external_name":"f","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@f.value = @f.value & (~f)"}},{"id":"reset_io(port:Byte,bit:Byte):Nil-instance-method","html_id":"reset_io(port:Byte,bit:Byte):Nil-instance-method","name":"reset_io","doc":"Resets the bit corresponding to *bit* in the I/O port given by\n*port*.\n\nNOTE: Port numbers start at 1.","summary":"<p>Resets the bit corresponding to <em>bit</em> in the I/O port given by <em>port</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Byte"},{"name":"bit","doc":null,"default_value":"","external_name":"bit","restriction":"Byte"}],"args_string":"(port : Byte, bit : Byte) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L232","def":{"name":"reset_io","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Byte"},{"name":"bit","doc":null,"default_value":"","external_name":"bit","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"__temp_26 = port - 1\n@io[__temp_26] = @io[__temp_26] & (~(1 << bit))\n"}},{"id":"run:Nil-instance-method","html_id":"run:Nil-instance-method","name":"run","doc":"Executes instructions until a HLT is encountered or until there are\nno instructions left in the loaded file.\n\nNOTE: This doesn't handle interrupts, so it should only be called\ndirectly for testing purposes. If you need to handle interrupts, you\nshould be calling `exec`.","summary":"<p>Executes instructions until a HLT is encountered or until there are no instructions left in the loaded file.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L310","def":{"name":"run","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@stopped = false\nwhile !@stopped\n  step\n  if (@pc.w == 0) || (@pc.w == @file_size)\n    break\n  end\nend\n"}},{"id":"set_flag(f:Byte):Nil-instance-method","html_id":"set_flag(f:Byte):Nil-instance-method","name":"set_flag","doc":"Sets the flag represented by *f*.","summary":"<p>Sets the flag represented by <em>f</em>.</p>","abstract":false,"args":[{"name":"f","doc":null,"default_value":"","external_name":"f","restriction":"Byte"}],"args_string":"(f : Byte) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L328","def":{"name":"set_flag","args":[{"name":"f","doc":null,"default_value":"","external_name":"f","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@f.value = @f.value | f"}},{"id":"set_int_period(fps:Number):Nil-instance-method","html_id":"set_int_period(fps:Number):Nil-instance-method","name":"set_int_period","doc":"Sets the interrupt period to `CLOCK_RATE / fps`; necessary for\nsynchronizing the CPU with external devices.","summary":"<p>Sets the interrupt period to <code><a href=\"../I8080/CPU.html#CLOCK_RATE\">CLOCK_RATE</a> / fps</code>; necessary for synchronizing the CPU with external devices.</p>","abstract":false,"args":[{"name":"fps","doc":null,"default_value":"","external_name":"fps","restriction":"Number"}],"args_string":"(fps : Number) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L134","def":{"name":"set_int_period","args":[{"name":"fps","doc":null,"default_value":"","external_name":"fps","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@int_period = CLOCK_RATE / fps\n@cycles = @int_period\n"}},{"id":"set_io(port:Byte,bit:Byte):Nil-instance-method","html_id":"set_io(port:Byte,bit:Byte):Nil-instance-method","name":"set_io","doc":"Sets the bit corresponding to *bit* in the I/O port given by *port*.\n\nNOTE: Port numbers start at 1.","summary":"<p>Sets the bit corresponding to <em>bit</em> in the I/O port given by <em>port</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Byte"},{"name":"bit","doc":null,"default_value":"","external_name":"bit","restriction":"Byte"}],"args_string":"(port : Byte, bit : Byte) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L224","def":{"name":"set_io","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Byte"},{"name":"bit","doc":null,"default_value":"","external_name":"bit","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"__temp_24 = port - 1\n@io[__temp_24] = @io[__temp_24] | (1 << bit)\n"}},{"id":"sp:I8080::Pair-instance-method","html_id":"sp:I8080::Pair-instance-method","name":"sp","doc":"The *stack pointer*, used in stack operations.","summary":"<p>The <em>stack pointer</em>, used in stack operations.</p>","abstract":false,"args":[],"args_string":" : I8080::Pair","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L37","def":{"name":"sp","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@sp"}},{"id":"step(n=1):Nil-instance-method","html_id":"step(n=1):Nil-instance-method","name":"step","doc":"Executes *n* instructions and increments the program counter\naccordingly.\n\nNOTE: This doesn't handle interrupts, so it should only be called\ndirectly for testing purposes. If you need to handle interrupts, you\nshould be calling `exec`.","summary":"<p>Executes <em>n</em> instructions and increments the program counter accordingly.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":""}],"args_string":"(n = <span class=\"n\">1</span>) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L251","def":{"name":"step","args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"n.times do\n  @dasm.try do |dasm|\n    dasm.addr = @pc.w\n    dasm.step\n  end\n  op(read_byte(@pc.w))\n  if @jumped\n    @jumped = false\n  else\n    @pc.w = @pc.w + 1\n  end\nend"}},{"id":"stopped:Bool-instance-method","html_id":"stopped:Bool-instance-method","name":"stopped","doc":"Tells whether or not the CPU has halted execution.","summary":"<p>Tells whether or not the CPU has halted execution.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L78","def":{"name":"stopped","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@stopped"}},{"id":"write_byte(addr:Word,value:Byte):Nil-instance-method","html_id":"write_byte(addr:Word,value:Byte):Nil-instance-method","name":"write_byte","doc":"Writes the given byte to the given address.","summary":"<p>Writes the given byte to the given address.</p>","abstract":false,"args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Byte"}],"args_string":"(addr : Word, value : Byte) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L161","def":{"name":"write_byte","args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@memory[addr] = value"}},{"id":"write_bytes(addr:Word,bytes:Bytes):Nil-instance-method","html_id":"write_bytes(addr:Word,bytes:Bytes):Nil-instance-method","name":"write_bytes","doc":"Writes *bytes* to memory sequentially starting at *addr*; useful for\nstrings.","summary":"<p>Writes <em>bytes</em> to memory sequentially starting at <em>addr</em>; useful for strings.</p>","abstract":false,"args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"},{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"Bytes"}],"args_string":"(addr : Word, bytes : Bytes) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L167","def":{"name":"write_bytes","args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"},{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"bytes.each.with_index do |b, i|\n  write_byte(addr + i, b)\nend"}},{"id":"write_io(port:Byte,x:Byte):Nil-instance-method","html_id":"write_io(port:Byte,x:Byte):Nil-instance-method","name":"write_io","doc":"Writes the given byte *x* to the I/O port given by *port*.\n\nNOTE: Port numbers start at 1.","summary":"<p>Writes the given byte <em>x</em> to the I/O port given by <em>port</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Byte"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Byte"}],"args_string":"(port : Byte, x : Byte) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L217","def":{"name":"write_io","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Byte"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@io[port - 1] = x"}},{"id":"write_word(addr:Word,value:Word):Nil-instance-method","html_id":"write_word(addr:Word,value:Word):Nil-instance-method","name":"write_word","doc":"Writes the given word to the given address.","summary":"<p>Writes the given word to the given address.</p>","abstract":false,"args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Word"}],"args_string":"(addr : Word, value : Word) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/cpu.cr#L172","def":{"name":"write_word","args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Word"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"lo, hi = I8080.word_to_bytes(value)\nwrite_byte(addr, lo)\nwrite_byte(addr + 1, hi)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080/Disassembler","path":"I8080/Disassembler.html","kind":"class","full_name":"I8080::Disassembler","name":"Disassembler","abstract":false,"superclass":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"i8080/disassembler.cr","line_number":13,"url":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr"}],"repository_name":"github.com/Marzipanzerfaust/crystal-i8080","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080","kind":"module","full_name":"I8080","name":"I8080"},"doc":"Disassembler for Intel 8080 machine code.\n\nExample:\n```\ndasm = Intel8080::Disassembler.new\ndasm.load_file(\"path/to/rom\")\ndasm.run\n# Output:\n# 0000: 31 34 12    LXI    SP,$1234\n# 0003: 3E 56       MVI    A,$56\n# ...\n```","summary":"<p>Disassembler for Intel 8080 machine code.</p>","class_methods":[],"constructors":[{"id":"new(cpu:CPU)-class-method","html_id":"new(cpu:CPU)-class-method","name":"new","doc":"This constructor can be used to attach the disassembler to an\nexisting `CPU`'s memory space.","summary":"<p>This constructor can be used to attach the disassembler to an existing <code><a href=\"../I8080/CPU.html\">CPU</a></code>'s memory space.</p>","abstract":false,"args":[{"name":"cpu","doc":null,"default_value":"","external_name":"cpu","restriction":"CPU"}],"args_string":"(cpu : CPU)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L36","def":{"name":"new","args":[{"name":"cpu","doc":null,"default_value":"","external_name":"cpu","restriction":"CPU"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(cpu)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L29","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"addr:Word-instance-method","html_id":"addr:Word-instance-method","name":"addr","doc":"The address containing the instruction about to be disassembled.","summary":"<p>The address containing the instruction about to be disassembled.</p>","abstract":false,"args":[],"args_string":" : Word","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L15","def":{"name":"addr","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Word","visibility":"Public","body":"@addr"}},{"id":"addr=(addr:Word)-instance-method","html_id":"addr=(addr:Word)-instance-method","name":"addr=","doc":"The address containing the instruction about to be disassembled.","summary":"<p>The address containing the instruction about to be disassembled.</p>","abstract":false,"args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"}],"args_string":"(addr : Word)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L15","def":{"name":"addr=","args":[{"name":"addr","doc":null,"default_value":"","external_name":"addr","restriction":"Word"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@addr = addr"}},{"id":"cpu:CPU?-instance-method","html_id":"cpu:CPU?-instance-method","name":"cpu","doc":"An optional attached `CPU`.\n\nIf an attached `CPU` exists, that `CPU`'s memory space will be used.","summary":"<p>An optional attached <code><a href=\"../I8080/CPU.html\">CPU</a></code>.</p>","abstract":false,"args":[],"args_string":" : CPU?","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L27","def":{"name":"cpu","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CPU | ::Nil","visibility":"Public","body":"@cpu"}},{"id":"file_size:Int32-instance-method","html_id":"file_size:Int32-instance-method","name":"file_size","doc":"The size of the loaded file in bytes.","summary":"<p>The size of the loaded file in bytes.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L18","def":{"name":"file_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@file_size"}},{"id":"load_file(filename:String):Int32-instance-method","html_id":"load_file(filename:String):Int32-instance-method","name":"load_file","doc":"Loads the contents of *filename* into the disassembler's memory,\nthen returns the file's size in bytes.","summary":"<p>Loads the contents of <em>filename</em> into the disassembler's memory, then returns the file's size in bytes.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"}],"args_string":"(filename : String) : Int32","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L48","def":{"name":"load_file","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"data = (File.read(filename)).chomp.to_slice\n@file_size = data.size\n@memory.copy_from(data)\nreturn @file_size\n"}},{"id":"memory:Bytes-instance-method","html_id":"memory:Bytes-instance-method","name":"memory","doc":"The disassembler's memory space, used to hold the contents of the\nloaded file.","summary":"<p>The disassembler's memory space, used to hold the contents of the loaded file.</p>","abstract":false,"args":[],"args_string":" : Bytes","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L22","def":{"name":"memory","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"@memory"}},{"id":"reset:Nil-instance-method","html_id":"reset:Nil-instance-method","name":"reset","doc":"Resets the address pointer to the origin.","summary":"<p>Resets the address pointer to the origin.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L42","def":{"name":"reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@addr = 0"}},{"id":"run:Nil-instance-method","html_id":"run:Nil-instance-method","name":"run","doc":"Disassembles instructions until the end of the file.","summary":"<p>Disassembles instructions until the end of the file.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L661","def":{"name":"run","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"loop do\n  step\n  if (@addr == @file_size) || (@addr == 0)\n    break\n  end\nend"}},{"id":"step(n=1):Nil-instance-method","html_id":"step(n=1):Nil-instance-method","name":"step","doc":"Disassembles the next *n* instructions.","summary":"<p>Disassembles the next <em>n</em> instructions.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":""}],"args_string":"(n = <span class=\"n\">1</span>) : Nil","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/disassembler.cr#L653","def":{"name":"step","args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"n.times do\n  disassemble(@memory[@addr])\n  @addr = @addr + 1\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080/Pair","path":"I8080/Pair.html","kind":"class","full_name":"I8080::Pair","name":"Pair","abstract":false,"superclass":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"i8080/pair.cr","line_number":6,"url":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/pair.cr"}],"repository_name":"github.com/Marzipanzerfaust/crystal-i8080","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080","kind":"module","full_name":"I8080","name":"I8080"},"doc":"A Pair is a simple data structure that has a word along with pointers\nto the low and high bytes of that word. It is intended to represent\nthe register pairs that are used by the Intel 8080, with each pointer\nbeing an individual register and the word being the resulting 16-bit\nvalue that the two registers form together.","summary":"<p>A Pair is a simple data structure that has a word along with pointers to the low and high bytes of that word.</p>","class_methods":[],"constructors":[{"id":"new(a:Byte,b:Byte)-class-method","html_id":"new(a:Byte,b:Byte)-class-method","name":"new","doc":"*a* is the low byte and *b* is the high byte of the resulting word.","summary":"<p><em>a</em> is the low byte and <em>b</em> is the high byte of the resulting word.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Byte"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Byte"}],"args_string":"(a : Byte, b : Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/pair.cr#L25","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Byte"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Byte"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(word:Word)-class-method","html_id":"new(word:Word)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"word","doc":null,"default_value":"","external_name":"word","restriction":"Word"}],"args_string":"(word : Word)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/pair.cr#L16","def":{"name":"new","args":[{"name":"word","doc":null,"default_value":"","external_name":"word","restriction":"Word"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(word)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"h:::Pointer(Byte)-instance-method","html_id":"h:::Pointer(Byte)-instance-method","name":"h","doc":"High byte pointer.","summary":"<p>High byte pointer.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/pair.cr#L14","def":{"name":"h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Byte)","visibility":"Public","body":"@h"}},{"id":"h=(h:::Pointer(Byte))-instance-method","html_id":"h=(h:::Pointer(Byte))-instance-method","name":"h=","doc":"High byte pointer.","summary":"<p>High byte pointer.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"::Pointer(Byte)"}],"args_string":"(h : ::Pointer(Byte))","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/pair.cr#L14","def":{"name":"h=","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"::Pointer(Byte)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@h = h"}},{"id":"l:::Pointer(Byte)-instance-method","html_id":"l:::Pointer(Byte)-instance-method","name":"l","doc":"Low byte pointer.","summary":"<p>Low byte pointer.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Byte)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/pair.cr#L11","def":{"name":"l","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Byte)","visibility":"Public","body":"@l"}},{"id":"l=(l:::Pointer(Byte))-instance-method","html_id":"l=(l:::Pointer(Byte))-instance-method","name":"l=","doc":"Low byte pointer.","summary":"<p>Low byte pointer.</p>","abstract":false,"args":[{"name":"l","doc":null,"default_value":"","external_name":"l","restriction":"::Pointer(Byte)"}],"args_string":"(l : ::Pointer(Byte))","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/pair.cr#L11","def":{"name":"l=","args":[{"name":"l","doc":null,"default_value":"","external_name":"l","restriction":"::Pointer(Byte)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@l = l"}},{"id":"w:Word-instance-method","html_id":"w:Word-instance-method","name":"w","doc":"The pair's word, formed by the values of `l` and `h`.","summary":"<p>The pair's word, formed by the values of <code><a href=\"../I8080/Pair.html#l:::Pointer(Byte)-instance-method\">#l</a></code> and <code><a href=\"../I8080/Pair.html#h:::Pointer(Byte)-instance-method\">#h</a></code>.</p>","abstract":false,"args":[],"args_string":" : Word","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/pair.cr#L8","def":{"name":"w","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Word","visibility":"Public","body":"@w"}},{"id":"w=(w:Word)-instance-method","html_id":"w=(w:Word)-instance-method","name":"w=","doc":"The pair's word, formed by the values of `l` and `h`.","summary":"<p>The pair's word, formed by the values of <code><a href=\"../I8080/Pair.html#l:::Pointer(Byte)-instance-method\">#l</a></code> and <code><a href=\"../I8080/Pair.html#h:::Pointer(Byte)-instance-method\">#h</a></code>.</p>","abstract":false,"args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Word"}],"args_string":"(w : Word)","source_link":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080/pair.cr#L8","def":{"name":"w=","args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Word"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@w = w"}}],"macros":[],"types":[]},{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080/Word","path":"I8080/Word.html","kind":"alias","full_name":"I8080::Word","name":"Word","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"i8080.cr","line_number":10,"url":"https://github.com/Marzipanzerfaust/crystal-i8080/blob/af5411fef59d1946deed13aba5471c3834c47a9c/src/i8080.cr"}],"repository_name":"github.com/Marzipanzerfaust/crystal-i8080","program":false,"enum":false,"alias":true,"aliased":"UInt16","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Marzipanzerfaust/crystal-i8080/I8080","kind":"module","full_name":"I8080","name":"I8080"},"doc":"For the Intel 8080, words are unsigned 16-bit integers (two bytes).","summary":"<p>For the Intel 8080, words are unsigned 16-bit integers (two bytes).</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}}